/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterfacePackage;

import BusinessPackage.Business;
import BusinessPackage.Market;
import BusinessPackage.Sales;
import java.awt.CardLayout;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ragha
 */
public class MonitorJPanel extends javax.swing.JPanel {

    /**
     * Creates new form MonitorJPanel
     */
    Business b;
    private JPanel userContainer;

    Sales sales;

    public MonitorJPanel(JPanel userContainer, Business b, Sales sales) {
        initComponents();
        this.b = b;
        this.userContainer = userContainer;

        this.sales = sales;
        tableForMarket.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        comboForMoniotring = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableForMarket = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableForSales = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        reward = new javax.swing.JLabel();

        setForeground(new java.awt.Color(204, 204, 204));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        comboForMoniotring.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Revenue totals for Xerox", "Product sales revenues by market", "Top 10 sales persons by revenues broken down by market", "Sales persons with consist above target sales", "Sales person with below total order target sales", "Top 3 products consistently sold above market target price", "Sales Person - Reward", "Sales Person - Penalty" }));
        comboForMoniotring.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboForMoniotringItemStateChanged(evt);
            }
        });
        comboForMoniotring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboForMoniotringActionPerformed(evt);
            }
        });
        add(comboForMoniotring, new org.netbeans.lib.awtextra.AbsoluteConstraints(62, 58, 450, -1));

        tableForMarket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Market Name", "Total Revenues"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableForMarket);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, 110));

        tableForSales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Sales Person Name", "Revenue"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableForSales);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 300, -1, 160));

        backButton.setText("Back >>");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 650, -1, -1));
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 100, 350, 20));

        reward.setText("jLabel2");
        add(reward, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 540, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void comboForMoniotringItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboForMoniotringItemStateChanged
        // TODO add your handling code here:
        if (comboForMoniotring.getSelectedIndex() == 1) {
            tableForMarket.setVisible(true);
            DefaultTableModel defaultTableModel = (DefaultTableModel) tableForMarket.getModel();
            defaultTableModel.setRowCount(0);

            for (Market market : b.getMarketList().getMarketList()) {
                {

                    Object[] row = new Object[2];
                    row[0] = market.getMarketName();
                    row[1] = market.getRevenue();

                    defaultTableModel.addRow(row);

                }
            }
        }
        if (comboForMoniotring.getSelectedIndex() == 3) {
            tableForSales.setAutoCreateRowSorter(true);
            tableForMarket.setVisible(false);

            DefaultTableModel defaultTableModel = (DefaultTableModel) tableForSales.getModel();
            defaultTableModel.setRowCount(0);
            for (Sales salePerson : b.getSalesDirectory().getUserAccountDir()) {
                if (salePerson.getRevenue() > 1000) {
                    Object[] row = new Object[2];
                    row[0] = salePerson.getFirstName();
                    row[1] = salePerson.getRevenue();
                    defaultTableModel.addRow(row);
                }

            }
        }
        if (comboForMoniotring.getSelectedIndex() == 4) {
            tableForMarket.setVisible(false);
            ArrayList<String> sales1 = new ArrayList<String>();

            DefaultTableModel defaultTableModel = (DefaultTableModel) tableForSales.getModel();
            defaultTableModel.setRowCount(0);
            for (Sales salePerson : b.getSalesDirectory().getUserAccountDir()) {
                if (salePerson.getRevenue() < 1000) {
                    sales1.add(salePerson.getFirstName());
                    Object[] row = new Object[2];
                    row[0] = salePerson.getFirstName();
                    row[1] = salePerson.getRevenue();
                    defaultTableModel.addRow(row);
                }

            }

        }
        if (comboForMoniotring.getSelectedIndex() == 5) {

        }
        if (comboForMoniotring.getSelectedIndex() == 6) {
            double max = b.getSalesDirectory().getUserAccountDir().get(0).getRevenue();
            for (Sales salePerson : b.getSalesDirectory().getUserAccountDir()) {
                if (max < salePerson.getRevenue()) {
                    max = salePerson.getRevenue();
                }
            }
            Sales found = b.getSalesDirectory().search(max);

            // found.getRevenue();
            reward.setText(found.getFirstName() + "is rewarded with compensation of 1000 for the best outcome of" + found.getRevenue());
        }
        if (comboForMoniotring.getSelectedIndex() == 7) {
            double max = b.getSalesDirectory().getUserAccountDir().get(0).getRevenue();
            for (Sales salePerson : b.getSalesDirectory().getUserAccountDir()) {
                if (max < salePerson.getRevenue() && (salePerson.getRevenue() < 1000)) {

                    max = salePerson.getRevenue();
                }
            }
            Sales found = b.getSalesDirectory().search(max);

            // found.getRevenue();
            reward.setText(found.getFirstName() + "has penalty due to his poor revenue" + found.getRevenue());
        }
        if (comboForMoniotring.getSelectedIndex() == 2) {
            tableForSales.setAutoCreateRowSorter(true);

            tableForMarket.setVisible(false);
            DefaultTableModel defaultTableModel = (DefaultTableModel) tableForSales.getModel();
            defaultTableModel.setRowCount(0);
            for (Sales salePerson : b.getSalesDirectory().getUserAccountDir()) {
                Object[] row = new Object[2];
                row[0] = salePerson.getFirstName();
                row[1] = salePerson.getRevenue();
                defaultTableModel.addRow(row);
            }

        }
        if (comboForMoniotring.getSelectedIndex() == 0) {
            double revenue = 0;
            for (Sales salePerson : b.getSalesDirectory().getUserAccountDir()) {
                revenue = revenue + salePerson.getRevenue();
            }
            jLabel1.setText("Total revenue is" + revenue);
        }
    }//GEN-LAST:event_comboForMoniotringItemStateChanged

    private void comboForMoniotringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboForMoniotringActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_comboForMoniotringActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        userContainer.remove(this);

        CardLayout layout = (CardLayout) userContainer.getLayout();
        layout.previous(userContainer);
    }//GEN-LAST:event_backButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JComboBox<String> comboForMoniotring;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel reward;
    private javax.swing.JTable tableForMarket;
    private javax.swing.JTable tableForSales;
    // End of variables declaration//GEN-END:variables
}
